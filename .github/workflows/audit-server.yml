name: Audit Server CI/CD

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'audit-server/**'
      - '.github/workflows/audit-server.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'audit-server/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: dgi-audit-server

jobs:
  # Job 0: Vérification de la configuration
  config-check-audit:
    name: Vérification Configuration Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: 📋 Audit Server Configuration Summary
      run: |
        echo "🔐 Résumé de la Configuration pour le Serveur d'Audit:"
        echo "-------------------------------------------------------"
        
        # Secrets requis (automatiques)
        echo "✅ GITHUB_TOKEN: Fourni automatiquement"
        
        # Secrets optionnels
        echo ""
        echo "📝 Secrets optionnels:"
        
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          echo "✅ SLACK_WEBHOOK_URL: Configuré - notifications déploiement activées"
        else
          echo "⚠️ SLACK_WEBHOOK_URL: Non configuré - notifications ignorées"
        fi
        
        echo ""
        echo "💡 Pour configurer les secrets manquants:"
        echo "   → Allez sur: Settings > Secrets and variables > Actions"
        echo "   → Consultez: CONFIGURATION_SECRETS.md"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Tests du serveur d'audit
  test-audit-server:
    name: Test Audit Server
    runs-on: ubuntu-latest
    needs: config-check-audit
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: audit-server/package-lock.json
        
    - name: 📦 Install dependencies
      working-directory: audit-server
      run: npm ci
      
    - name: 🧪 Run server tests
      working-directory: audit-server
      run: |
        # Démarrer le serveur en arrière-plan
        npm start &
        SERVER_PID=$!
        
        # Attendre que le serveur démarre
        sleep 10
        
        # Exécuter les tests
        npm test
        
        # Arrêter le serveur
        kill $SERVER_PID

  # Build de l'image Docker
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test-audit-server
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./audit-server
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Tests de sécurité sur l'image Docker
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗 Build local image for scanning
      uses: docker/build-push-action@v5
      with:
        context: ./audit-server
        load: true
        tags: audit-server:scan
        
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'audit-server:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Déploiement staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [test-audit-server, build-docker, security-scan]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to staging
      run: |
        echo "🐳 Deploying audit server to staging..."
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:develop"
        
        # Ici vous pourriez déployer vers votre infrastructure staging
        # kubectl set image deployment/audit-server audit-server=$IMAGE:$TAG
        # ou docker-compose up -d avec la nouvelle image
        
        echo "✅ Staging deployment completed"

  # Déploiement production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test-audit-server, build-docker, security-scan]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to production
      run: |
        echo "🐳 Deploying audit server to production..."
        echo "Image: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest"
        
        # Déploiement production
        # kubectl set image deployment/audit-server audit-server=$IMAGE:latest
        # ou mise à jour de votre docker-compose.yml
        
        echo "✅ Production deployment completed"
        
    - name: 🧪 Health check
      run: |
        echo "🔍 Checking audit server health..."
        # curl -f https://audit.dgi.ga/health || exit 1
        echo "✅ Health check passed"
        
    - name: 🔍 Check Slack configuration
      run: |
        if [ -z "$SLACK_WEBHOOK_URL" ]; then
          echo "⚠️ SLACK_WEBHOOK_URL non configuré - notifications ignorées"
          echo "💡 Pour activer: Configurez le secret SLACK_WEBHOOK_URL dans les paramètres GitHub"
        else
          echo "✅ Slack configuré - envoi de notification"
        fi
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 🔔 Notify deployment
      if: secrets.SLACK_WEBHOOK_URL
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "✅ Serveur d'audit DGI déployé en production!"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true  # Ne pas faire échouer si Slack est en panne
