name: CI/CD Pipeline - DGI Access Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.0.25'

jobs:
  # Job 0: Vérification de la configuration
  config-check:
    name: Vérification Configuration
    runs-on: ubuntu-latest
    
    steps:
    - name: 📋 Configuration Summary
      run: |
        echo "🔐 Résumé de la Configuration des Secrets:"
        echo "----------------------------------------"
        
        # Secrets requis (automatiques)
        echo "✅ GITHUB_TOKEN: Fourni automatiquement"
        
        # Secrets optionnels
        echo ""
        echo "📝 Secrets optionnels:"
        
        echo "⚠️ OPENAI_API_KEY: Vérification des secrets disponibles"
        echo "⚠️ NETLIFY_AUTH_TOKEN: Vérification des secrets disponibles"
        echo "⚠️ NETLIFY_STAGING_SITE_ID: Vérification des secrets disponibles"
        echo "⚠️ NETLIFY_PRODUCTION_SITE_ID: Vérification des secrets disponibles"
        echo "⚠️ SLACK_WEBHOOK_URL: Vérification des secrets disponibles"
        
        echo ""
        echo "💡 Pour configurer les secrets manquants:"
        echo "   → Allez sur: Settings > Secrets and variables > Actions"
        echo "   → Consultez le script: bun run setup:secrets"


  # Job 1: Tests unitaires et qualité de code
  test:
    name: Tests et Qualité
    runs-on: ubuntu-latest
    needs: config-check
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗 Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: 📦 Install dependencies
      run: bun install --frozen-lockfile
      
    - name: 🔍 Lint code
      run: bun run lint
      
    - name: 🧪 Run unit tests
      run: bun run test:run
      env:
        VITE_AI_PROVIDER: mock
        VITE_AUDIT_ENABLED: true
        
    - name: 📊 Generate test coverage
      run: bun run test:coverage
      
    - name: 📤 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: dgi-access-coverage
        
    - name: 💾 Cache build artifacts
      uses: actions/cache@v3
      with:
        path: |
          ~/.bun/cache
          node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
        restore-keys: |
          ${{ runner.os }}-bun-

  # Job 2: Tests d'intégration OpenAI (uniquement sur main)
  integration-tests:
    name: Tests d'Intégration
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗 Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: 📦 Install dependencies
      run: bun install --frozen-lockfile
      
    - name: 🔧 Setup environment
      run: bun run setup:env
      
    - name: 🔍 Check OpenAI configuration
      run: |
        echo "⚠️ OPENAI_API_KEY - vérification des tests OpenAI"
        echo "💡 Pour activer: Configurez le secret OPENAI_API_KEY dans les paramètres GitHub"

    - name: 🧪 Test OpenAI integration
      run: |
        echo "Tests OpenAI ignorés - configuration requise"
        echo "Pour activer: ajoutez OPENAI_API_KEY aux secrets GitHub"
      continue-on-error: true

  # Job 3: Build et tests de build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗 Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: 📦 Install dependencies
      run: bun install --frozen-lockfile
      
    - name: 🔧 Setup production environment
      run: bun run setup:env:prod
      
    - name: 🏗 Build application
      run: bun run build
      env:
        VITE_AI_PROVIDER: openai
        VITE_AI_API_KEY: placeholder
        VITE_AUDIT_ENABLED: true
        VITE_AUDIT_ENDPOINT: https://audit.dgi.ga/api/logs
        
    - name: 📏 Check bundle size
      run: |
        ls -lah dist/
        du -sh dist/
        
    - name: 🧪 Test build
      run: |
        bun run preview &
        sleep 5
        curl -f http://localhost:4173 || exit 1
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 30

  # Job 4: Tests de sécurité
  security:
    name: Audit de Sécurité
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗 Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: 📦 Install dependencies
      run: bun install --frozen-lockfile
      
    - name: 🔒 Run security audit
      run: bun audit
      continue-on-error: true
      
    - name: 🕵️ CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: 🏗 Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Job 5: Déploiement staging (sur develop)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [test, build, security]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-${{ github.sha }}
        path: dist/
        
    - name: 🔍 Check Netlify Staging configuration
      run: |
        echo "⚠️ Configuration Netlify Staging - déploiement ignoré"
        echo "💡 Pour activer le déploiement staging:"
        echo "   - Configurez NETLIFY_AUTH_TOKEN dans les secrets GitHub"
        echo "   - Configurez NETLIFY_STAGING_SITE_ID dans les secrets GitHub"

    - name: 🚀 Deploy to Netlify Staging
      run: |
        echo "Déploiement Netlify Staging ignoré - configuration requise"
        echo "Pour activer: ajoutez NETLIFY_AUTH_TOKEN et NETLIFY_STAGING_SITE_ID aux secrets GitHub"
      continue-on-error: true

  # Job 6: Déploiement production (sur main)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, build, security, integration-tests]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-${{ github.sha }}
        path: dist/
        
    - name: 🔍 Check Netlify Production configuration
      run: |
        echo "⚠️ Configuration Netlify Production - déploiement ignoré"
        echo "💡 Pour activer le déploiement production:"
        echo "   - Configurez NETLIFY_AUTH_TOKEN dans les secrets GitHub"
        echo "   - Configurez NETLIFY_PRODUCTION_SITE_ID dans les secrets GitHub"

    - name: 🚀 Deploy to Netlify Production
      run: |
        echo "Déploiement Netlify Production ignoré - configuration requise"
        echo "Pour activer: ajoutez NETLIFY_AUTH_TOKEN et NETLIFY_PRODUCTION_SITE_ID aux secrets GitHub"
      continue-on-error: true
        
    - name: 📊 Deploy audit server
      run: |
        echo "🐳 Deploying audit server..."
        # Ici vous pourriez déployer le serveur d'audit
        # docker build -t dgi-audit-server ./audit-server
        # docker push registry.dgi.ga/audit-server:${{ github.sha }}
        
    - name: 🔍 Check Slack configuration  
      run: |
        echo "⚠️ SLACK_WEBHOOK_URL non configuré - notifications ignorées"
        echo "💡 Pour activer: Configurez le secret SLACK_WEBHOOK_URL dans les paramètres GitHub"

    - name: 🔔 Deployment notification
      run: |
        echo "✅ DGI Access Application déployée en production!"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref }}"
        echo "Notifications Slack ignorées - configuration requise"
      continue-on-error: true

  # Job 7: Tests post-déploiement
  smoke-tests:
    name: Tests de Smoke
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: deploy-production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗 Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: 🧪 Run smoke tests
      run: |
        echo "🔍 Testing production deployment..."
        curl -f https://access.dgi.ga || exit 1
        curl -f https://access.dgi.ga/health || echo "Health endpoint not found"
        
    - name: 🔔 Notify on failure
      if: failure()
      run: |
        echo "❌ Tests de smoke échoués pour DGI Access Application"
        echo "Notifications Slack ignorées - configuration requise"
      continue-on-error: true
